<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>Create a change log</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>60</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>MY_REPO_ROOT</name>
          <description>/localdisk/designer/$USER/$PROJECT</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MY_WORKSPACE</name>
          <description>localdisk/loadbuild/$USER/$PROJECT/$TIMESTAMP</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>FORCE_BUILD</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAYER</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo "MY_REPO_ROOT=$MY_REPO_ROOT"
echo "MY_WORKSPACE=$MY_WORKSPACE"
echo "FORCE_BUILD=$FORCE_BUILD"
echo "LAYER=$LAYER"

[ -n "$MY_REPO_ROOT" ]
[ -n "$MY_WORKSPACE" ]
[ -d "$MY_REPO_ROOT" ]

if [ "$LAYER" == "all" ]; then
    LAYER=""
fi

sanitized_list () {
    local list="$@"
    local f=""

    for f in $list; do 
        if [ ! -e "$f" ]; then 
            list="$(echo $list | sed "s#^$f # #" | sed "s#^$f\$##" | sed "s# $f\$##" | sed "s# $f # #" )"
        fi
    done

    echo "$list"
}

cd $MY_REPO_ROOT
mkdir -p $MY_WORKSPACE

if [ ! -f $MY_WORKSPACE/../LAST_COMMITS ]; then
    touch "${MY_WORKSPACE}/NEED_BUILD"
fi

if  $FORCE_BUILD ; then
    touch "${MY_WORKSPACE}/NEED_BUILD"
fi


LAST_COMMITS="$MY_WORKSPACE/../LAST_COMMITS"
touch $LAST_COMMITS

# Change log spanning all gits
LOG="$MY_WORKSPACE/CHANGELOG"
for e in $(find . -xtype d -name .git | grep -v './.repo/repo/.git')
do
 pushd $e/..
 f=$(/usr/bin/dirname $e)
 echo "$f"
 g=$(printf "%-48s" $f)
 c=$(grep $(echo $f | sed 's:/:[/]:g' | sed 's:$:[^a-zA-Z0-9/_-]:' | sed 's:^[.][.]:^[.][.]:' | sed 's:^[.]:^[.]:') $LAST_COMMITS | awk ' { print $2 } ')
 git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" --date=iso --after $(date --date='yesterday' +%Y-%m-%d) &gt; $LOG.PART
 cat $LOG.PART &gt;&gt; $LOG.OLD
 if [ "x$c" != "x" ] ; then
   git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" $c.. $list &gt;&gt; $LOG || true
 else
   cat $MY_WORKSPACE/CHANGELOG.PART &gt;&gt; $LOG
 fi
 popd
done
if [ -f $LOG.PART ]; then
    \rm -f $LOG.PART
fi

# Change log spanning know config files
DL_LOG="$MY_WORKSPACE/CHANGELOG_DL"
BLD_LOG="$MY_WORKSPACE/CHANGELOG_BUILD"
IMG_LOG="$MY_WORKSPACE/CHANGELOG_IMG"
ISO_LOG="$MY_WORKSPACE/CHANGELOG_ISO"
DEB_BUILDER_LOG="$MY_WORKSPACE/CHANGELOG_DEB_BUILDER"

f='./stx-tools'
pushd $f
 list="$(sanitized_list stx/dockerfiles stx/toCOPY)"
 g=$(printf "%-48s" $f)
 c=$(grep $(echo $f | sed 's:/:[/]:g' | sed 's:$:[^a-zA-Z0-9/_-]:' | sed 's:^[.][.]:^[.][.]:' | sed 's:^[.]:^[.]:') $LAST_COMMITS | awk ' { print $2 } ')
 git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" --date=iso --after $(date --date='yesterday' +%Y-%m-%d) $list &gt; $DEB_BUILDER_LOG.PART
 if [ "x$c" != "x" ] ; then
   git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" $c.. $list &gt;&gt; $DEB_BUILDER_LOG || true
 else
   cat $DEB_BUILDER_LOG.PART &gt;&gt; $DEB_BUILDER_LOG
 fi
popd
\rm $DEB_BUILDER_LOG.PART

f='./stx-tools'
pushd $f
 list="$(sanitized_list centos-mirror-tools/yum.conf.sample centos-mirror-tools/config/centos/$LAYER)"
 g=$(printf "%-48s" $f)
 c=$(grep $(echo $f | sed 's:/:[/]:g' | sed 's:$:[^a-zA-Z0-9/_-]:' | sed 's:^[.][.]:^[.][.]:' | sed 's:^[.]:^[.]:') $LAST_COMMITS | awk ' { print $2 } ')
 git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" --date=iso --after $(date --date='yesterday' +%Y-%m-%d) $list &gt; $DL_LOG.PART
 if [ "x$c" != "x" ] ; then
   git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" $c.. $list &gt;&gt; $DL_LOG || true
 else
   cat $DL_LOG.PART &gt;&gt; $DL_LOG
 fi
popd
\rm $DL_LOG.PART

f='./cgcs-root'
pushd $f
 list="$(sanitized_list $(find build-tools/build_iso -name '*.cfg') build-tools/build_iso/minimal_rpm_list.txt)"
 g=$(printf "%-48s" $f)
 c=$(grep $(echo $f | sed 's:/:[/]:g' | sed 's:$:[^a-zA-Z0-9/_-]:' | sed 's:^[.][.]:^[.][.]:' | sed 's:^[.]:^[.]:') $LAST_COMMITS | awk ' { print $2 } ')
 git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" --date=iso --after $(date --date='yesterday' +%Y-%m-%d) $list &gt; $ISO_LOG.PART
 if [ "x$c" != "x" ] ; then
   git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" $c.. $list &gt;&gt; $ISO_LOG || true
 else
   cat $ISO_LOG.PART &gt;&gt; $ISO_LOG
 fi
popd
\rm $ISO_LOG.PART

f='./cgcs-root'
pushd $f
 list="$(sanitized_list build-tools/signing build-tools/certificates)"
 g=$(printf "%-48s" $f)
 c=$(grep $(echo $f | sed 's:/:[/]:g' | sed 's:$:[^a-zA-Z0-9/_-]:' | sed 's:^[.][.]:^[.][.]:' | sed 's:^[.]:^[.]:') $LAST_COMMITS | awk ' { print $2 } ')
 git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" --date=iso --after $(date --date='yesterday' +%Y-%m-%d) $list &gt; $BLD_LOG.PART
 if [ "x$c" != "x" ] ; then
   git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" $c.. $list &gt;&gt; $BLD_LOG || true
 else
   cat $BLD_LOG.PART &gt;&gt; $BLD_LOG
 fi
popd
\rm $BLD_LOG.PART

f='./cgcs-root'
pushd $f
 list="$(sanitized_list build-tools/build-docker-images build-tools/build-wheels)"
 g=$(printf "%-48s" $f)
 c=$(grep $(echo $f | sed 's:/:[/]:g' | sed 's:$:[^a-zA-Z0-9/_-]:' | sed 's:^[.][.]:^[.][.]:' | sed 's:^[.]:^[.]:') $LAST_COMMITS | awk ' { print $2 } ')
 git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" --date=iso --after $(date --date='yesterday' +%Y-%m-%d) $list &gt; $IMG_LOG.PART
 if [ "x$c" != "x" ] ; then
   git log --pretty=tformat:"$g  %H  %ci%x09%cn%x09%ce%x09%s" $c.. &gt;&gt; $IMG_LOG || true
 else
   cat $IMG_LOG.PART &gt;&gt; $IMG_LOG
 fi
popd
\rm $IMG_LOG.PART

# if [ "$LAYER" != "containers" ]; then
    if [ $(cat "$LOG" | \
            grep -v '^[.][/]cgcs-root/stx/docs '  | \
            grep -v '^[.][/]cgcs-root/stx/test '  | \
            grep -v '^[.][/]cgcs-root '  | \
            grep -v '^[.][/]stx-tools '  | \
            grep -v '^[.][/]cgcs-root/local-build-data '  | \
            wc -l) -gt 0 ]; then
        touch "${MY_WORKSPACE}/NEED_BUILD"
    fi
# fi

if [ $(cat "$BLD_LOG" "$DL_LOG" | wc -l) -gt 0 ]; then
    touch "${MY_WORKSPACE}/NEED_BUILD"
fi

if [ "$LAYER" == "flock" ]; then
    if [ $(cat "$ISO_LOG" | wc -l) -gt 0 ]; then
        touch "${MY_WORKSPACE}/NEED_BUILD"
    fi
fi

if [ "$LAYER" == "containers" ]; then
    if [ $(cat "$IMG_LOG" | wc -l) -gt 0 ]; then
        touch "${MY_WORKSPACE}/NEED_BUILD"
    fi
    # Just always build
    touch "${MY_WORKSPACE}/NEED_BUILD"
fi

if [ "$LAYER" == "build-containers" ]; then
    if ! $FORCE_BUILD &amp;&amp; [ -f "${MY_WORKSPACE}/NEED_BUILD" ]; then
        \rm -f "${MY_WORKSPACE}/NEED_BUILD"
    fi
    if [ $(cat "$DEB_BUILDER_LOG" | wc -l) -gt 0 ]; then
        touch "${MY_WORKSPACE}/NEED_BUILD"
    fi
fi

if [ ! -f "${MY_WORKSPACE}/NEED_BUILD" ]; then
        touch "${MY_WORKSPACE}/NO_BUILD_REQUIRED"
fi
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@448.v5b_97805e3767">
      <recipients>scott.little@windriver.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.95">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from/>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.22"/>
  </buildWrappers>
</project>